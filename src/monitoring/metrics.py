"""
M6 Monitoring - Prometheus指标收集器
定义和管理所有业务、性能、健康指标
"""

from prometheus_client import Counter, Histogram, Gauge, Info
from typing import Dict, Any
from datetime import datetime


class MetricsCollector:
    """
    Prometheus指标收集器
    提供单例模式，全局唯一实例
    """

    _instance = None

    def __new__(cls):
        if cls._instance is None:
            cls._instance = super().__new__(cls)
            cls._instance._initialized = False
        return cls._instance

    def __init__(self):
        if self._initialized:
            return

        # 业务指标 - M2发现
        self.posts_discovered = Counter(
            'posts_discovered_total',
            'Total posts discovered by M2',
            ['subreddit', 'source']
        )

        self.posts_duplicate = Counter(
            'posts_duplicate_total',
            'Duplicate posts filtered',
            ['subreddit']
        )

        # 业务指标 - M3筛选
        self.posts_screened = Counter(
            'posts_screened_total',
            'Posts processed by M3',
            ['decision']  # 'approved', 'rejected'
        )

        self.screening_rejection_reasons = Counter(
            'screening_rejection_reasons_total',
            'Screening rejection reasons',
            ['reason']  # 'low_relevance', 'nsfw', 'low_engagement', etc.
        )

        # 业务指标 - M4内容生成
        self.comments_generated = Counter(
            'comments_generated_total',
            'Comments generated by M4',
            ['persona', 'intent']
        )

        self.generation_failures = Counter(
            'generation_failures_total',
            'Comment generation failures',
            ['error_type']
        )

        # 业务指标 - M5发布
        self.comments_published = Counter(
            'comments_published_total',
            'Comments published to Reddit',
            ['status']  # 'success', 'failed'
        )

        self.publish_failures = Counter(
            'publish_failures_total',
            'Publishing failures',
            ['error_type']  # 'no_available_accounts', 'all_top3_failed', etc.
        )

        self.comments_deleted = Counter(
            'comments_deleted_total',
            'Comments deleted by Reddit or moderators'
        )

        # 性能指标 - 模块耗时
        self.screening_duration = Histogram(
            'screening_duration_seconds',
            'M3 screening duration',
            buckets=(0.1, 0.5, 1.0, 2.0, 5.0, 10.0, 30.0)
        )

        self.generation_duration = Histogram(
            'generation_duration_seconds',
            'M4 generation duration',
            buckets=(1.0, 3.0, 5.0, 10.0, 20.0, 30.0, 60.0)
        )

        self.publishing_duration = Histogram(
            'publishing_duration_seconds',
            'M5 publishing duration',
            buckets=(1.0, 5.0, 10.0, 30.0, 60.0, 120.0, 300.0)
        )

        # 健康指标 - 账号池
        self.available_accounts = Gauge(
            'available_accounts',
            'Number of available accounts (unlocked + has quota)'
        )

        self.total_accounts = Gauge(
            'total_accounts',
            'Total number of accounts in pool'
        )

        self.locked_accounts = Gauge(
            'locked_accounts',
            'Number of locked accounts'
        )

        self.quota_exhausted_accounts = Gauge(
            'quota_exhausted_accounts',
            'Number of accounts with exhausted quota'
        )

        # 健康指标 - 错误率
        self.error_rate = Gauge(
            'error_rate',
            'Error rate by module',
            ['module']  # 'm2', 'm3', 'm4', 'm5'
        )

        # 健康指标 - API限流
        self.api_rate_limit_remaining = Gauge(
            'api_rate_limit_remaining',
            'Remaining API rate limit',
            ['api']  # 'reddit', 'openai'
        )

        # 系统信息
        self.system_info = Info(
            'system_info',
            'System information'
        )

        self.system_info.info({
            'version': '0.6.0',
            'module': 'monitoring',
            'started_at': datetime.now().isoformat()
        })

        self._initialized = True

    # 便捷方法 - M2发现

    def record_post_discovered(self, subreddit: str, source: str = 'reddit_api'):
        """记录发现的帖子"""
        self.posts_discovered.labels(subreddit=subreddit, source=source).inc()

    def record_duplicate_post(self, subreddit: str):
        """记录重复帖子"""
        self.posts_duplicate.labels(subreddit=subreddit).inc()

    # 便捷方法 - M3筛选

    def record_screening_result(self, approved: bool, rejection_reason: str = None):
        """记录筛选结果"""
        decision = 'approved' if approved else 'rejected'
        self.posts_screened.labels(decision=decision).inc()

        if not approved and rejection_reason:
            self.screening_rejection_reasons.labels(reason=rejection_reason).inc()

    def record_screening_duration(self, duration_seconds: float):
        """记录筛选耗时"""
        self.screening_duration.observe(duration_seconds)

    # 便捷方法 - M4生成

    def record_comment_generated(self, persona: str, intent: str):
        """记录生成的评论"""
        self.comments_generated.labels(persona=persona, intent=intent).inc()

    def record_generation_failure(self, error_type: str):
        """记录生成失败"""
        self.generation_failures.labels(error_type=error_type).inc()

    def record_generation_duration(self, duration_seconds: float):
        """记录生成耗时"""
        self.generation_duration.observe(duration_seconds)

    # 便捷方法 - M5发布

    def record_publish_success(self):
        """记录发布成功"""
        self.comments_published.labels(status='success').inc()

    def record_publish_failure(self, error_type: str):
        """记录发布失败"""
        self.comments_published.labels(status='failed').inc()
        self.publish_failures.labels(error_type=error_type).inc()

    def record_publishing_duration(self, duration_seconds: float):
        """记录发布耗时"""
        self.publishing_duration.observe(duration_seconds)

    def record_comment_deleted(self):
        """记录评论被删除"""
        self.comments_deleted.inc()

    # 便捷方法 - 健康指标

    def update_account_stats(self, stats: Dict[str, int]):
        """
        更新账号池统计

        Args:
            stats: 账号统计字典，例如：
                {
                    'total_accounts': 200,
                    'available_accounts': 150,
                    'locked_accounts': 10,
                    'no_quota_accounts': 40
                }
        """
        self.total_accounts.set(stats.get('total_accounts', 0))
        self.available_accounts.set(stats.get('available_accounts', 0))
        self.locked_accounts.set(stats.get('locked_accounts', 0))
        self.quota_exhausted_accounts.set(stats.get('no_quota_accounts', 0))

    def update_error_rate(self, module: str, error_rate: float):
        """
        更新模块错误率

        Args:
            module: 模块名 ('m2', 'm3', 'm4', 'm5')
            error_rate: 错误率 (0.0-1.0)
        """
        self.error_rate.labels(module=module).set(error_rate)

    def update_api_rate_limit(self, api: str, remaining: int):
        """
        更新API限流剩余次数

        Args:
            api: API名称 ('reddit', 'openai')
            remaining: 剩余次数
        """
        self.api_rate_limit_remaining.labels(api=api).set(remaining)

    # 获取当前指标快照

    def get_snapshot(self) -> Dict[str, Any]:
        """
        获取当前指标快照（用于/stats端点）

        Returns:
            指标字典
        """
        return {
            "discovery": {
                "posts_discovered": self._get_counter_value(self.posts_discovered),
                "duplicate_filtered": self._get_counter_value(self.posts_duplicate)
            },
            "screening": {
                "total_screened": self._get_counter_value(self.posts_screened),
                "approved": self._get_counter_value(self.posts_screened, {'decision': 'approved'}),
                "rejected": self._get_counter_value(self.posts_screened, {'decision': 'rejected'})
            },
            "generation": {
                "total_generated": self._get_counter_value(self.comments_generated),
                "failures": self._get_counter_value(self.generation_failures)
            },
            "publishing": {
                "total_published": self._get_counter_value(self.comments_published),
                "success": self._get_counter_value(self.comments_published, {'status': 'success'}),
                "failed": self._get_counter_value(self.comments_published, {'status': 'failed'}),
                "deleted": self._get_counter_value(self.comments_deleted)
            },
            "accounts": {
                "total": self._get_gauge_value(self.total_accounts),
                "available": self._get_gauge_value(self.available_accounts),
                "locked": self._get_gauge_value(self.locked_accounts),
                "quota_exhausted": self._get_gauge_value(self.quota_exhausted_accounts)
            }
        }

    def _get_counter_value(self, counter, labels: Dict[str, str] = None):
        """获取Counter值"""
        try:
            if labels:
                return counter.labels(**labels)._value.get()
            else:
                # 获取所有label组合的总和
                return sum(
                    sample.value
                    for sample in counter.collect()[0].samples
                    if sample.name.endswith('_total')
                )
        except:
            return 0

    def _get_gauge_value(self, gauge):
        """获取Gauge值"""
        try:
            return gauge._value.get()
        except:
            return 0


# 全局单例
metrics_collector = MetricsCollector()
